<template>
    <div>
        <form class="login-form text-center">
            <p>Mode: {{mode}}</p>
            <div class="login-form__input-group" :class="{invalid: $v.user.email.$error}">
                <label class="login-form__label" for="email">Email</label>
                <input class="login-form__input" id="email" type="text" v-model="user.email" placeholder="eg. username@gmail.com" @blur="$v.user.email.$touch()">
            </div>
            <div class="login-form__input-group" :class="{invalid: $v.user.password.$error}">
                <label class="login-form__label" for="password">Password</label>
                <input class="login-form__input" id="password" type="password" v-model="user.password" placeholder="Pssst... don't use 'password'" @blur="$v.user.password.$touch()">
            </div>
            <div class="input-group">
                <button class="login-form__button" @click.prevent="submitLogin" :disabled="$v.$invalid">{{mode.toUpperCase()}}</button>
            </div>
            <!-- <div class="input-group">
                <button class="login-form__button" @click.prevent="signOut">Sign Out</button>
            </div>
            <div class="input-group">
                <button class="login-form__button" @click.prevent="checkUser">Check User</button>
            </div>
            <div class="input-group">
                <button class="login-form__button" @click.prevent="addCookie">Add Cookie</button>
            </div> -->
            <toast :toast="toast"></toast>
        </form>
    </div>
</template>

<script>
import { required, email, minLength } from 'vuelidate/lib/validators'
import Toast from '~/components/Base/Toast.vue'
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
import firebase from 'firebase'
>>>>>>> af947747d0c74314b6292d20c0f5282a228dd253
>>>>>>> 66aed667bb976c3351d8ae052ea47ac1795a1d62

export default {
    data() {
        return {
            user: {
                email: '',
                password: ''
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 66aed667bb976c3351d8ae052ea47ac1795a1d62
            },
            toast: {
                status: null,
                message: null
<<<<<<< HEAD
=======
=======
>>>>>>> af947747d0c74314b6292d20c0f5282a228dd253
>>>>>>> 66aed667bb976c3351d8ae052ea47ac1795a1d62
            }
        }
    },
    computed: {
        formValid() {
            return true
        }
    },
    components: {
        toast: Toast
    },
<<<<<<< HEAD
    props: ['mode'],
    methods: {
        submitLogin() {
                // Check whether user exists
                this.$store.dispatch('login', this.user)
                    .then(user => {
                        console.log('Successful login!')
=======
<<<<<<< HEAD
    props: ['mode'],
    methods: {
        submitLogin() {
                // Check whether user exists
                this.$store.dispatch('login', this.user)
                    .then(user => {
                        console.log('Successful login!')
=======
    props: ['mode', 'toast'],
    methods: {
        submitLogin() {
                // Check whether user exists
                this.$store.dispatch('checkUserStatus', this.user)
                    .then(res => {
>>>>>>> af947747d0c74314b6292d20c0f5282a228dd253
>>>>>>> 66aed667bb976c3351d8ae052ea47ac1795a1d62
                        this.$router.push('/')
                    })
                    .catch(e => {
                        console.log(e)
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 66aed667bb976c3351d8ae052ea47ac1795a1d62
                        this.toast = {
                            status: 'error',
                            message: 'Login details incorrect'
                        }
                        setTimeout(() => {
                            this.toast = {
                                status: null,
                                message: null
                            }
                        }, 2000)
<<<<<<< HEAD
=======
=======
>>>>>>> af947747d0c74314b6292d20c0f5282a228dd253
>>>>>>> 66aed667bb976c3351d8ae052ea47ac1795a1d62
                    })
                // Check whether user is permitted

                // Check password matches

                // Push to dashboard
        },
        // signOut() {
        //     this.$store.dispatch('logUserOut')
        // },
        // checkUser() {
        //     console.log(firebase.auth().currentUser)
        // },
        // addCookie() {
        //     this.$store.dispatch('addCookie', 'kjdkhassadiasoijoijijowqoij')
        // }
    },
    validations: {
        user: {
            email: {
                required: required,
                email: email
            },
            password: {
                required: required,
                minLength: minLength(6)
            }
        }
    }
}
</script>

<style scoped>
.invalid {
    border: red solid 1px;
}

.invalid label{
    color: red;
}
</style>
